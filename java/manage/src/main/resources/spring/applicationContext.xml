<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
	<context:property-placeholder location="classpath:datebase.properties" />
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="resultSetLogEnabled" value="false" />
		<property name="statementLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="statementExecuteAfterLogEnabled" value="true" />
		<property name="statementExecuteBatchAfterLogEnabled" value="true" />
		<property name="statementExecuteQueryAfterLogEnabled" value="true" />
		<property name="statementExecuteUpdateAfterLogEnabled" value="true" />
		<property name="statementParameterClearLogEnable" value="false" />
		<property name="statementParameterSetLogEnabled" value="false" />
		<property name="dataSourceLogEnabled" value="false" />
		<property name="connectionCloseAfterLogEnabled" value="false" />
		<property name="connectionCommitAfterLogEnabled" value="false" />
		<property name="connectionConnectAfterLogEnabled" value="false" />
		<property name="connectionConnectBeforeLogEnabled" value="false" />
		<property name="connectionLogEnabled" value="false" />
		<property name="connectionRollbackAfterLogEnabled" value="false" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<property name="filters" value="stat" />

		<property name="maxActive" value="20" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.yjzs.xiaoyu.manage.model" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
							supportMethodsArguments=true
							returnPageInfo=check
							params=count=countSql
						</value>
					</property>
				</bean>
				<!-- <bean class="tk.mybatis.mapper.mapperhelper.PerformanceInterceptor"></bean> -->
	<!-- 			<bean class="tk.mybatis.mapper.mapperhelper.MapperOnceInterceptor">
					<property name="properties">
						<value>
							mappers=tk.mybatis.mapper.common.Mapper
							IDENTITY=MYSQL
							notEmpty=true
						</value>
					</property>
				</bean> -->
			</array>
		</property>
	</bean>

<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="addToConfig" value="true" />
		<property name="basePackage" value="com.dongao.mapper" />
	</bean> -->

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wxc.manage.mapper" />
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<property name="markerInterface" value="com.wxc.manage.mapper.BaseMapper" /><!-- 重新生成mapper  -->
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口  -->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
      
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<aop:aspectj-autoproxy />

	<aop:config>
		<aop:pointcut id="appService" expression="execution(* com.wxc.manage.service..*Service*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
     <property name="maxUploadSize" value="104857600" />
     <property name="maxInMemorySize" value="4096" />
			<property name="defaultEncoding" value="UTF-8"/>
	</bean> 

	<!-- 配置 JSR303 Bean Validator 定义 -->
	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->
</beans>